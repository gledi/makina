[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "makina"
authors = [
  {name = "Gledi Caushaj", email = "411820+gledi@users.noreply.github.com"},
]
description = "Marketplace for buying/selling cars and other motorvehicles"
dynamic = ["version"]
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
keywords = [
  "marketplace",
  "cars",
  "buying",
  "selling",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Web Environment",
  "Framework :: Django",
  "Framework :: Django :: 4.2",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
dependencies = [
  "django",
  "environs",
  "dj-database-url",
  "djangorestframework",
  "django-crispy-forms",
  "crispy-bootstrap5",
  "pillow",
  "django-imagekit",
  "django-taggit",
  "django-filter",
  "django-hashids",
  "whitenoise[brotli]",
  "django-quill-editor",
  "psycopg[c,pool]",
  "mistune",
  "pygments",
  "requests",
  "django-redis",
  "redis",
  "hiredis",
  "channels[daphne]",
  "channels-redis",
]

[project.optional-dependencies]
prod = [
  "daphne",
  "twisted[tls,http2]",
]
test = [
  "pytest",
  "pytest-django",
  "pytest-cov",
  "model-bakery",
  "faker",
]
dev = [
  "django-debug-toolbar",
  "django-extensions",
  "django-silk",
  "ipython",
  "ruff",
  "black",
  "graphviz",
  "types-requests",
  "django-types",
]

[project.scripts]
makina = "makina.manage:main"

[project.urls]
Documentation = "https://github.com/gledi/makina#readme"
Issues = "https://github.com/gledi/makina/issues"
Source = "https://github.com/gledi/makina"

[tool.setuptools.dynamic]
version = {attr = "makina.__version__"}

[tool.setuptools.packages]
find = {where = ["src"]}

[tool.ruff]
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C90", # mccabe
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "BLE", # flake8-blind-exception
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "B",   # flake8-bugbear
    "DJ",  # flake8-django
    "Q",   # flake8-quotes
    "TID", # flake8-tidy-imports
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "ERA", # flake8-eradicate
    "RUF", # ruff specific rules
]
ignore = ["E501"]
extend-exclude = ["setup.py"]
target-version = "py312"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"**/settings/*.py" = ["F401", "F403"]
"**/tests/*.py" = ["S101"]
"**/management/commands/*.py" = ["A003"]
"**/migrations/*.py" = ["SLF001"]
"**/apiv1/views.py" = ["A002"]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.isort]
known-first-party = ["makina"]
known-third-party = ["django"]

[tool.black]
target-version = ['py312']
extend-exclude = '(.*\/migrations\/)'

[tool.pycln]
all = true
verbose = true
extend_exclude = "(settings/|migrations/|__init__.py|_version.py)"

[tool.pytest.ini_options]
pythonpath = ["makina"]
python_files = ["test_*.py", "*_tests.py"]
xfail_strict = true
filterwarnings = [
    "ignore::django.utils.deprecation.RemovedInDjango51Warning",
]
addopts = [
    "--ds=makina.core.settings.testing",
    "--strict-config",
    "--strict-markers",
    "--cov=makina",
    "--cov-branch",
    "--cov-report=term-missing",
]

[tool.coverage.run]
branch = true
omit = [
    "src/makina/**/__init__.py",
    "src/makina/_version.py",
    "src/makina/manage.py",
    "src/makina/core/settings/*.py",
    "src/makina/**/migrations/*.py",
    "src/makina/tests/**/*.py",
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.tbump.version]
current = "0.1.0b2"
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  (?P<pre>rc\d+|a\d+|b\d+|\.post\d+|\.dev\d+)?
  '''

[tool.tbump.git]
message_template = "chore: Release {new_version}"
tag_template = "v{new_version}"

[[tool.tbump.file]]
src = "src/makina/__init__.py"
